server {
    listen 80;
    server_name yourdomain.com www.yourdomain.com; # Change to your desired virtual host domain

    location / {
        proxy_pass http://node-app:3000; # Docker container name or IP:PORT of your Node.js app
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    # Redirect HTTP to HTTPS (optional, if using SSL)
    # if ($scheme != "https") {
    #     return 301 https://$host$request_uri;
    # }

    # SSL Configuration (optional, but recommended for production)
    # include snippets/ssl-yourdomain.com.conf;
    # include snippets/ssl-params.conf;

    # Additional security and performance configurations

    # Enable HSTS (HTTP Strict Transport Security)
    add_header Strict-Transport-Security "max-age=31536000" always;

    # Disable unnecessary HTTP methods
    if ($request_method !~ ^(GET|HEAD|POST)$ ) {
        return 405;
    }

    # Block common exploit patterns
    include snippets/block-exploits.conf;

    # Enable X-Content-Type-Options
    add_header X-Content-Type-Options "nosniff";

    # Enable X-Frame-Options to prevent Clickjacking
    add_header X-Frame-Options "SAMEORIGIN";

    # Enable XSS protection
    add_header X-XSS-Protection "1; mode=block";

    # Content Security Policy (customize based on your application needs)
    # add_header Content-Security-Policy "default-src 'self'; script-src 'self' https://cdn.example.com;";

    # Enable Gzip Static Compression (for static assets)
    location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
        expires max;
        add_header Cache-Control "public, max-age=31536000";
        gzip_static on;
    }

    # Logging configurations
    access_log /var/log/nginx/yourdomain-access.log;
    error_log /var/log/nginx/yourdomain-error.log;
}
